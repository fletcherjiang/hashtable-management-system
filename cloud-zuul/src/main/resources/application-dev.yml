spring:
  cloud:
    config:
      name: zuul
      uri: http://localhost:8888
      label: master
  application:
    name: cloud-zuul
#  redis:
#    host: 127.0.0.1
#    port: 6379
#    password:
#    timeout: 20000
#    expireSeconds: 120
#    #连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
#    max-active: 8
#    min-idle: 0
#    #最大空闲数
#    max-idle: 8
#    #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
#    max-wait: -1

server:
  port: 8080
  max-http-header-size: 10240

#请求处理的超时时间和连接超时时间处理
ribbon:
  ReadTimeout: 10000 #请求处理的超时时间
  ConnectTimeout: 5000 #请求连接的超时时间
  MaxAutoRetries: 1 #对当前实例的重试次数
  MaxAutoRetriesNextServer: 2 #切换实例的重试次数
  eureka:
    enabled: true
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: http://${eurekaUserName}:${eurekaPassWord}@localhost:8761/eureka/
  instance:
    prefer‐ip‐address: true
    status-page-url-path: /actuator/info
    health-check-url-path: /actuator/health
eurekaUserName: joe
eurekaPassWord: hadoop

zuul:
  routes:
    auth:
      path: /api/auth/**
      service-id: cloud-auth
      admin:
        path: /api/admin/**
        service-id: cloud-admin
    #微服务映射规则【面向服务的配置 通过微服务的名称找到，自动实现负载均衡】
    producer:
      path: /cloudProvider/**
      sensitiveHeaders:
      #映射产品服务中心服务ID，zuul会自动使用服务端负载均衡。分摊请求
      serviceId: cloud-provider

#    auth:
#      path: /auth/**
#      sensitiveHeaders:
#      serviceId: cloud-oauth2

  #添加代理头
  add-proxy-headers: true
  host:
    connect-timeout-millis: 20000
    socket-timeout-millis: 20000
  sensitive-headers: Cookie,Set-Cookie
  ignored-services: "*"

security:
  oauth2:
    client:
      access-token-uri: http://localhost:${server.port}/api/auth/oauth/token
      user-authorization-uri: http://localhost:${server.port}/api/auth/oauth/authorize
      client-id: cloud-admin
      client-secret: cloud-admin-secret
    resource:
      user-info-uri: http://localhost:${server.port}/api/auth/home/principal
      prefer-token-info: false
      jwt:
        key-value: cloud_oauth_key
#        key-uri: http://localhost:${server.port}/auth/oauth/token_key
# key-value跟key-uri：token的验证可以直接在本地（即本服务）完成，不需要连接wsm-oauth服务认证服务器。
#              注意：如果要使用key-value对称加密方式，
#                    到wsm-oauth服务AuthorizationServerConfig类JwtAccessTokenConverter方法中使用对称加密方式
#    jwt:
#      key-value: sophia #对称加密方式
#      key-uri: http://localhost:${server.port}/auth/oauth/token_key #非对称加密方式 (获取公钥)

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 100000

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    bus-refresh:
      enabled: true